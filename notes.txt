but retirer la hash map, utiliser seulement invoice
playId will become playname and we add type into performance.java so that we don't need to use play.java

play.java could be useful if we had a catalog of played stored 'outside', such as a .txt or a .csv and play would get all those value every time (plus add some function to add/delete line from this file) => too long, not asked
But as it is, we would prefer to get ride of the hash map and searching threw it as we define it just before using => redundancy
Adding 1 parameter to performance.java allow us to get rid of play.java and having to create a list of play to search for the type.

adding new type into the switch case in performanc.java


UGLY but working : 

public int html_print(Invoice invoice, HashMap<String, Play> plays) {
    int totalAmount = 0;
    int volumeCredits = 0;
    String file_name = String.format("Statement_%s.html", invoice.customer);
    File file = new File(file_name);

    String result = String.format("<!doctype html> <html lang=\"en-US\"> <head> <meta charset=\"utf-8\" /> <title> Statement for %s", invoice.customer);
    result += String.format("</title> </head> <body>");
    result += String.format("<p> Statement for %s</p>", invoice.customer);

    NumberFormat frmt = NumberFormat.getCurrencyInstance(Locale.US);

    for (Performance perf : invoice.performances) {
      Play play = plays.get(perf.playID);

      int thisAmount = getAmount( perf,  play.type);
      totalAmount += thisAmount;
      volumeCredits += getVolumeCredit( perf,  play.type);

      result += String.format("<p>  %s: %s (%s seats)</p>", play.name, frmt.format(thisAmount / 100), perf.audience);
      
    }
    result += String.format("<p> Amount owed is %s </p>", frmt.format(totalAmount / 100));
    result += String.format("<p> You earned %s credits </p> </body> </html>", volumeCredits);

    try {
            file.createNewFile();
        } catch (IOException e1) {
            e1.printStackTrace();
        }try {
            PrintWriter out = new PrintWriter(file);
            out.println(result);
            out.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
  
    return 0;
  }
